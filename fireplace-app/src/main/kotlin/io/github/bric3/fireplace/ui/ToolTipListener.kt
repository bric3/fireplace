/*
 * Fireplace
 *
 * Copyright (c) 2021, Today - Brice Dutheil
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
package io.github.bric3.fireplace.ui

import java.awt.Component
import java.awt.event.*
import javax.swing.JScrollBar
import javax.swing.JScrollPane
import javax.swing.ToolTipManager

/**
 * This class is used to help generate tooltips on components added to a
 * scrollpane. Generally tooltips are generated as the mouse if moved over
 * components that display tooltips. On complex component, like a JTable
 * the component can generate multiple tooltips depending on which cell the
 * mouse is positioned over.
 *
 * However, when the viewport of the scroll-pane is moved and the mouse is
 * not moved the tooltip is not updated even though the mouse is positioned
 * over a different cell. This might happen for example when the mouse wheel
 * is used to scroll the viewport.
 *
 * To force updating of the tooltip, this class will generate a phantom
 * mouseMoved event which is passed to the ToolTipManager.
 *
 * This class is actually a 3 in 1 listener and will work slightly different
 * depending on how it is being used. When used as a:
 *
 * 1. `MouseWheelListener` - it is added to the scrollpane. In this case the
 * mouseMoved events are only generated by scrolling of the mouse wheel
 * and therefore only supports vertical movement of the viewport
 *
 * 2. `AdjustmentListener` - is added to the vertical and/or horizontal scrollbar.
 * In this case the viewport can be scrolled by using the mouse wheel or
 * the keyboard and mouseMoved events will be generated.
 *
 * 3. `ComponentListener` - it is added to the component. In this case all forms
 * of viewport movement as well as changes in the component size will cause
 * the mouseMoved event to be generated.
 *
 * Source: https://tips4java.wordpress.com/2009/11/08/tooltips-and-scrollpanes/
 */
class ToolTipListener : ComponentListener, MouseWheelListener, AdjustmentListener {
    /**
     * Create a mouseMoved event to pass to the ToolTipManager.
     */
    private fun phantomMouseMoved(component: Component?) {
        if (component == null) return

        //  Mouse is in the bounds of the component, generate phantom
        //  mouseMoved event for the ToolTipManager
        val mouseLocation = component.mousePosition
        if (mouseLocation != null) {
            val phantom = MouseEvent(
                component,
                MouseEvent.MOUSE_MOVED,
                System.currentTimeMillis(),
                0,
                mouseLocation.x,
                mouseLocation.y,
                0,
                false
            )
            ToolTipManager.sharedInstance().mouseMoved(phantom)
        }
    }

    //  Implement ComponentListener
    override fun componentMoved(e: ComponentEvent) {
        val component = e.component
        phantomMouseMoved(component)
    }

    override fun componentResized(e: ComponentEvent) {
        val component = e.component
        phantomMouseMoved(component)
    }

    override fun componentHidden(e: ComponentEvent) {}
    override fun componentShown(e: ComponentEvent) {}

    //  Implement MouseWheelListener
    override fun mouseWheelMoved(e: MouseWheelEvent) {
        val scrollPane = e.source as JScrollPane
        val component = scrollPane.viewport.view
        phantomMouseMoved(component)
    }

    //  Implement AdjustmentListener
    override fun adjustmentValueChanged(e: AdjustmentEvent) {
        val scrollBar = e.source as JScrollBar
        val scrollPane = scrollBar.parent as JScrollPane
        val component = scrollPane.viewport.view
        phantomMouseMoved(component)
    }
}